{"ast":null,"code":"import { catchAxiosError } from \"./error\";\nimport { post, get, postFile } from \"./restservice\";\nimport Router from 'next/router';\nimport { Cookies } from 'react-cookie';\nimport nextCookies from 'next-cookies';\nimport jwt_decode from 'jwt-decode';\nconst cookies = new Cookies();\nexport const backendImages = \"https://uplink.work/restapi/uploadimages/\";\nexport async function createProfile(firstname, lastname, email, password) {\n  // Request data to post to createprofile route on rest api\n  fetch('http://localhost:3600/users', {\n    method: 'POST',\n    headers: {\n      \"Content-type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      \"firstName\": firstname,\n      \"lastName\": lastname,\n      \"email\": email,\n      \"password\": password\n    })\n  }).then(function (response) {\n    return response.json();\n  }).then(function (data) {\n    console.log('Request succeeded with JSON response', data);\n  }).catch(function (error) {\n    console.log('Request failed', error);\n  });\n}\nexport async function loginRequest(email, password) {\n  // New Login Data request\n  const newLogin = await fetch('http://localhost:3600/auth', {\n    method: 'POST',\n    headers: {\n      \"Content-type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      \"email\": email,\n      \"password\": password\n    })\n  }).then(function (response) {\n    return response.json();\n  }).then(function (data) {\n    cookies.set('accessToken', data.accessToken);\n    cookies.set('refreshToken', data.refreshToken);\n    const decoded = jwt_decode(data.accessToken);\n    cookies.set('name', decoded.name);\n    cookies.set('email', decoded.email);\n    cookies.set('refreshKey', decoded.refreshKey);\n    cookies.set('permission_level', decoded.permissionLevel);\n    cookies.set('userId', decoded.userId);\n    Router.push(\"/\");\n  }).catch(function (error) {\n    return error;\n  });\n\n  if (newLogin) {\n    return \"Username/Password does not match our records!\";\n  }\n}\nexport async function Logout() {\n  cookies.remove('accessToken');\n  cookies.remove('refreshToken');\n  cookies.remove('name');\n  cookies.remove('email');\n  cookies.remove('refreshKey');\n  cookies.remove('userId');\n  await Router.push(\"/login\");\n}\nexport async function createTask(objective, status) {\n  const getCookies = cookies.getAll(); // New Login Data request\n\n  const newTask = await fetch('http://localhost:3600/tasks', {\n    method: 'POST',\n    headers: {\n      \"Content-type\": \"application/json\",\n      \"Authorization\": `Bearer ${getCookies.accessToken}`\n    },\n    body: JSON.stringify({\n      \"objective\": objective,\n      \"status\": status\n    })\n  }).then(function (response) {\n    return response.json();\n  }).catch(function (error) {\n    return error;\n  });\n\n  if (newTask) {\n    return newTask;\n  }\n}\nexport async function getTasks(limit, token) {\n  const getCookies = cookies.getAll(); // New Login Data request\n\n  const newTask = await fetch('http://localhost:3600/tasks', {\n    method: 'GET',\n    headers: {\n      \"Content-type\": \"application/json\",\n      \"Authorization\": `Bearer ${getCookies.accessToken ? getCookies.accessToken : token}`\n    },\n    query: JSON.stringify({\n      \"limit\": limit\n    })\n  }).then(function (response) {\n    return response.json();\n  }).catch(function (error) {\n    return error;\n  });\n\n  if (newTask) {\n    return newTask;\n  }\n}\nexport async function removeTask(taskId) {\n  const getCookies = cookies.getAll(); // New Login Data request\n\n  const newTask = await fetch(`http://localhost:3600/tasks/${taskId}`, {\n    method: 'DELETE',\n    headers: {\n      \"Authorization\": `Bearer ${getCookies.accessToken ? getCookies.accessToken : token}`\n    }\n  }).then(function (response) {\n    return response.json();\n  }).catch(function (error) {\n    return error;\n  });\n\n  if (newTask) {\n    return newTask;\n  }\n}\nexport async function updateTaskStatus(taskId, newstatus) {\n  const getCookies = cookies.getAll(); // New Login Data request\n\n  const newTask = await fetch(`http://localhost:3600/tasks/${taskId}`, {\n    method: 'PATCH',\n    headers: {\n      \"Authorization\": `Bearer ${getCookies.accessToken ? getCookies.accessToken : token}`\n    },\n    body: JSON.stringify({\n      \"status\": newstatus\n    })\n  }).then(function (response) {\n    return response.json();\n  }).catch(function (error) {\n    return error;\n  });\n\n  if (newTask) {\n    return newTask;\n  }\n}","map":{"version":3,"sources":["/Users/williamforte/Canvas/burkedeveloping/services/apiservice.js"],"names":["catchAxiosError","post","get","postFile","Router","Cookies","nextCookies","jwt_decode","cookies","backendImages","createProfile","firstname","lastname","email","password","fetch","method","headers","body","JSON","stringify","then","response","json","data","console","log","catch","error","loginRequest","newLogin","set","accessToken","refreshToken","decoded","name","refreshKey","permissionLevel","userId","push","Logout","remove","createTask","objective","status","getCookies","getAll","newTask","getTasks","limit","token","query","removeTask","taskId","updateTaskStatus","newstatus"],"mappings":"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","sourcesContent":["import { catchAxiosError } from \"./error\";\nimport { post, get , postFile} from \"./restservice\";\nimport Router from 'next/router';\nimport { Cookies } from 'react-cookie';\nimport nextCookies from 'next-cookies'\nimport jwt_decode from 'jwt-decode';\n\nconst cookies = new Cookies();\n\nexport const backendImages = \"https://uplink.work/restapi/uploadimages/\";\n\nexport async function createProfile(firstname, lastname, email, password) {\n    // Request data to post to createprofile route on rest api\n    fetch('http://localhost:3600/users', {\n        method: 'POST',\n        headers: {\n            \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            \"firstName\": firstname,\n            \"lastName\": lastname,\n            \"email\": email,\n            \"password\": password\n        })\n    })\n    .then(function(response) {\n        return response.json();\n    })\n    .then(function(data) {\n        console.log('Request succeeded with JSON response', data);\n    })\n    .catch(function(error) {\n        console.log('Request failed', error);\n    });\n}\n\nexport async function loginRequest(email, password) {\n    // New Login Data request\n    const newLogin = await fetch('http://localhost:3600/auth', {\n        method: 'POST',\n        headers: {\n            \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            \"email\": email,\n            \"password\": password\n        })\n    })\n    .then(function(response) {\n        return response.json();\n    })\n    .then(function(data) {\n        cookies.set('accessToken', data.accessToken);\n        cookies.set('refreshToken', data.refreshToken);\n        const decoded = jwt_decode(data.accessToken);\n        cookies.set('name', decoded.name)\n        cookies.set('email', decoded.email)\n        cookies.set('refreshKey', decoded.refreshKey)\n        cookies.set('permission_level', decoded.permissionLevel)\n        cookies.set('userId', decoded.userId)\n        Router.push(\"/\")\n    })\n    .catch(function(error) {\n        return error\n    });\n    if(newLogin) {\n        return \"Username/Password does not match our records!\"\n    }\n}\n\nexport async function Logout() {\n    cookies.remove('accessToken');\n    cookies.remove('refreshToken');\n    cookies.remove('name')\n    cookies.remove('email')\n    cookies.remove('refreshKey')\n    cookies.remove('userId')\n    await Router.push(\"/login\");\n}\n\nexport async function createTask(objective, status) {\n    \n    const getCookies = cookies.getAll()\n    // New Login Data request\n    const newTask = await fetch('http://localhost:3600/tasks', {\n        method: 'POST',\n        headers: {\n            \"Content-type\": \"application/json\",\n            \"Authorization\": `Bearer ${getCookies.accessToken}`\n        },\n        body: JSON.stringify({\n            \"objective\": objective,\n            \"status\": status\n        })\n    })\n    .then(function(response) {\n        return response.json();\n    })\n    .catch(function(error) {\n        return error\n    });\n    if(newTask) {\n        return newTask\n    }\n}\n\nexport async function getTasks(limit, token) {\n    \n    const getCookies = cookies.getAll()\n    // New Login Data request\n    const newTask = await fetch('http://localhost:3600/tasks', {\n        method: 'GET',\n        headers: {\n            \"Content-type\": \"application/json\",\n            \"Authorization\": `Bearer ${getCookies.accessToken ? getCookies.accessToken: token}`\n        },\n        query: JSON.stringify({\n            \"limit\": limit\n        })\n    })\n    .then(function(response) {\n        return response.json();\n    })\n    .catch(function(error) {\n        return error\n    });\n    if(newTask) {\n        return newTask\n    }\n}\n\nexport async function removeTask(taskId) {\n    \n    const getCookies = cookies.getAll()\n    // New Login Data request\n    const newTask = await fetch(`http://localhost:3600/tasks/${taskId}`, {\n        method: 'DELETE',\n        headers: {\n            \"Authorization\": `Bearer ${getCookies.accessToken ? getCookies.accessToken: token}`\n        }\n    })\n    .then(function(response) {\n        return response.json();\n    })\n    .catch(function(error) {\n        return error\n    });\n    if(newTask) {\n        return newTask\n    }\n}\n\nexport async function updateTaskStatus(taskId, newstatus) {\n    \n    const getCookies = cookies.getAll()\n    // New Login Data request\n    const newTask = await fetch(`http://localhost:3600/tasks/${taskId}`, {\n        method: 'PATCH',\n        headers: {\n            \"Authorization\": `Bearer ${getCookies.accessToken ? getCookies.accessToken: token}`\n        },\n        body: JSON.stringify({\n            \"status\": newstatus,\n        })\n    })\n    .then(function(response) {\n        return response.json();\n    })\n    .catch(function(error) {\n        return error\n    });\n    if(newTask) {\n        return newTask\n    }\n}\n"]},"metadata":{},"sourceType":"module"}