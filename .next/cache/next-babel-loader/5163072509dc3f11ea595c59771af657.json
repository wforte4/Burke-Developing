{"ast":null,"code":"import _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport BannerSlider from '../components/banner';\nimport Theme from '../styles/theme';\nimport nextCookie from 'next-cookies';\nimport { createTask, getTasks, removeTask, updateTaskStatus } from '../services/apiservice';\nimport { useState, useEffect } from 'react';\nimport Router from 'next/router';\nconst sortingOrder = {\n  'inprogress': 1,\n  'created': 2,\n  'done': 3\n};\n\nfunction compare(key, order = 'asc') {\n  return function (a, b) {\n    if (!a.hasOwnProperty(key) || !b.hasOwnProperty(key)) return 0;\n    const first = a[key].toLowerCase() in sortingOrder ? sortingOrder[a[key]] : Number.MAX_SAFE_INTEGER;\n    const second = b[key].toLowerCase() in sortingOrder ? sortingOrder[b[key]] : Number.MAX_SAFE_INTEGER;\n    let result = 0;\n    if (first < second) result = -1;else if (first > second) result = 1;\n    return order === 'desc' ? ~result : result;\n  };\n}\n\nfunction Backend({\n  getFirstLoad\n}) {\n  const {\n    0: inputs,\n    1: setInputs\n  } = useState({\n    objective: '',\n    status: 'created'\n  });\n  const {\n    0: allTasks,\n    1: setAllTasks\n  } = useState(getFirstLoad != null ? getFirstLoad : null);\n  const {\n    0: status,\n    1: setStatus\n  } = useState(getFirstLoad != null ? 'succeeded' : 'none');\n  let lastcat = null; // Create a new Task DEFAULT: status: 'created'\n\n  const createNewTask = async e => {\n    e.preventDefault();\n    const newTask = await createTask(inputs.objective, inputs.status);\n\n    if (newTask) {\n      console.log(newTask);\n      setInputs(_objectSpread(_objectSpread({}, inputs), {}, {\n        objective: ''\n      }));\n      updateTasks(e);\n    }\n  }; // Updating Tasks with Backend\n\n\n  const updateTasks = async e => {\n    setStatus('loading');\n    const getalltasks = await getTasks(50, null);\n\n    if (getalltasks) {\n      console.log(getalltasks);\n      getalltasks.sort(compare('status'));\n      setAllTasks(getalltasks);\n      setStatus('succeeded');\n    }\n  };\n\n  const removeThisTask = async (e, task_id) => {\n    e.preventDefault();\n    const removenewtask = await removeTask(task_id);\n\n    if (removenewtask) {\n      console.log(removenewtask);\n      updateTasks(e);\n    }\n  };\n\n  const updateThisTask = async (e, task_id, status) => {\n    e.preventDefault();\n    const updatenewtask = await updateTaskStatus(task_id, status);\n\n    if (updatenewtask) {\n      console.log(updatenewtask);\n      updateTasks(e);\n    }\n  };\n\n  const isTyping = e => {\n    e.persist();\n    setInputs(_objectSpread(_objectSpread({}, inputs), {}, {\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  return __jsx(\"div\", {\n    className: _JSXStyle.dynamic([[\"3804077584\", [Theme.colors.coral, Theme.colors.coral, Theme.colors.coral, Theme.colors.coral]]]) + \" \" + 'body'\n  }, __jsx(\"img\", {\n    id: \"body_bg\",\n    src: \"/bg_login.png\",\n    className: _JSXStyle.dynamic([[\"3804077584\", [Theme.colors.coral, Theme.colors.coral, Theme.colors.coral, Theme.colors.coral]]])\n  }), __jsx(\"div\", {\n    id: \"abovelayer\",\n    className: _JSXStyle.dynamic([[\"3804077584\", [Theme.colors.coral, Theme.colors.coral, Theme.colors.coral, Theme.colors.coral]]])\n  }, __jsx(\"div\", {\n    className: _JSXStyle.dynamic([[\"3804077584\", [Theme.colors.coral, Theme.colors.coral, Theme.colors.coral, Theme.colors.coral]]]) + \" \" + 'sideleft'\n  }, __jsx(\"form\", {\n    onSubmit: createNewTask,\n    className: _JSXStyle.dynamic([[\"3804077584\", [Theme.colors.coral, Theme.colors.coral, Theme.colors.coral, Theme.colors.coral]]])\n  }, __jsx(\"h1\", {\n    className: _JSXStyle.dynamic([[\"3804077584\", [Theme.colors.coral, Theme.colors.coral, Theme.colors.coral, Theme.colors.coral]]])\n  }, \"New Task\"), __jsx(\"textarea\", {\n    name: \"objective\",\n    onChange: isTyping,\n    value: inputs.objective,\n    placeholder: \"Objective\",\n    required: true,\n    className: _JSXStyle.dynamic([[\"3804077584\", [Theme.colors.coral, Theme.colors.coral, Theme.colors.coral, Theme.colors.coral]]])\n  }), __jsx(\"button\", {\n    className: _JSXStyle.dynamic([[\"3804077584\", [Theme.colors.coral, Theme.colors.coral, Theme.colors.coral, Theme.colors.coral]]])\n  }, \"Add Task\")), __jsx(\"div\", {\n    className: _JSXStyle.dynamic([[\"3804077584\", [Theme.colors.coral, Theme.colors.coral, Theme.colors.coral, Theme.colors.coral]]]) + \" \" + 'tasklist'\n  }, __jsx(\"h1\", {\n    className: _JSXStyle.dynamic([[\"3804077584\", [Theme.colors.coral, Theme.colors.coral, Theme.colors.coral, Theme.colors.coral]]])\n  }, \"My Tasks\"), allTasks ? allTasks.map((task, i) => {\n    let nextStatus = task.status == 'created' ? 'inprogress' : 'done';\n\n    if (lastcat == task.status) {\n      return __jsx(\"div\", {\n        key: i,\n        className: _JSXStyle.dynamic([[\"3804077584\", [Theme.colors.coral, Theme.colors.coral, Theme.colors.coral, Theme.colors.coral]]]) + \" \" + 'task'\n      }, __jsx(\"h2\", {\n        className: _JSXStyle.dynamic([[\"3804077584\", [Theme.colors.coral, Theme.colors.coral, Theme.colors.coral, Theme.colors.coral]]])\n      }, \"Objective: \", task.objective), __jsx(\"h3\", {\n        className: _JSXStyle.dynamic([[\"3804077584\", [Theme.colors.coral, Theme.colors.coral, Theme.colors.coral, Theme.colors.coral]]])\n      }, \"Status: \", task.status), __jsx(\"img\", {\n        src: \"/three_dots.png\",\n        className: _JSXStyle.dynamic([[\"3804077584\", [Theme.colors.coral, Theme.colors.coral, Theme.colors.coral, Theme.colors.coral]]]) + \" \" + 'threedots'\n      }), __jsx(\"div\", {\n        className: _JSXStyle.dynamic([[\"3804077584\", [Theme.colors.coral, Theme.colors.coral, Theme.colors.coral, Theme.colors.coral]]]) + \" \" + 'floater'\n      }, __jsx(\"div\", {\n        onClick: e => {\n          task.status = nextStatus;\n          updateThisTask(e, task.id, nextStatus);\n        },\n        className: _JSXStyle.dynamic([[\"3804077584\", [Theme.colors.coral, Theme.colors.coral, Theme.colors.coral, Theme.colors.coral]]]) + \" \" + 'update'\n      }, \"Update Status\"), __jsx(\"div\", {\n        onClick: e => removeThisTask(e, task.id),\n        className: _JSXStyle.dynamic([[\"3804077584\", [Theme.colors.coral, Theme.colors.coral, Theme.colors.coral, Theme.colors.coral]]]) + \" \" + 'remove'\n      }, \"Remove Task\")));\n    } else {\n      lastcat = task.status;\n      return __jsx(React.Fragment, null, __jsx(\"div\", {\n        className: _JSXStyle.dynamic([[\"3804077584\", [Theme.colors.coral, Theme.colors.coral, Theme.colors.coral, Theme.colors.coral]]]) + \" \" + 'cat'\n      }, task.status.toUpperCase()), __jsx(\"div\", {\n        key: i,\n        className: _JSXStyle.dynamic([[\"3804077584\", [Theme.colors.coral, Theme.colors.coral, Theme.colors.coral, Theme.colors.coral]]]) + \" \" + 'task'\n      }, __jsx(\"h2\", {\n        className: _JSXStyle.dynamic([[\"3804077584\", [Theme.colors.coral, Theme.colors.coral, Theme.colors.coral, Theme.colors.coral]]])\n      }, \"Objective: \", task.objective), __jsx(\"h3\", {\n        className: _JSXStyle.dynamic([[\"3804077584\", [Theme.colors.coral, Theme.colors.coral, Theme.colors.coral, Theme.colors.coral]]])\n      }, \"Status: \", task.status), __jsx(\"img\", {\n        src: \"/three_dots.png\",\n        className: _JSXStyle.dynamic([[\"3804077584\", [Theme.colors.coral, Theme.colors.coral, Theme.colors.coral, Theme.colors.coral]]]) + \" \" + 'threedots'\n      }), __jsx(\"div\", {\n        className: _JSXStyle.dynamic([[\"3804077584\", [Theme.colors.coral, Theme.colors.coral, Theme.colors.coral, Theme.colors.coral]]]) + \" \" + 'floater'\n      }, __jsx(\"div\", {\n        onClick: e => updateThisTask(e, task.id, 'inprogress'),\n        className: _JSXStyle.dynamic([[\"3804077584\", [Theme.colors.coral, Theme.colors.coral, Theme.colors.coral, Theme.colors.coral]]]) + \" \" + 'update'\n      }, \"Update Status\"), __jsx(\"div\", {\n        onClick: e => removeThisTask(e, task.id),\n        className: _JSXStyle.dynamic([[\"3804077584\", [Theme.colors.coral, Theme.colors.coral, Theme.colors.coral, Theme.colors.coral]]]) + \" \" + 'remove'\n      }, \"Remove Task\"))));\n    }\n  }) : status == 'none' ? __jsx(\"h2\", {\n    className: _JSXStyle.dynamic([[\"3804077584\", [Theme.colors.coral, Theme.colors.coral, Theme.colors.coral, Theme.colors.coral]]])\n  }, \"No Tasks yet\") : __jsx(\"div\", {\n    className: _JSXStyle.dynamic([[\"3804077584\", [Theme.colors.coral, Theme.colors.coral, Theme.colors.coral, Theme.colors.coral]]]) + \" \" + 'loading'\n  })))), __jsx(_JSXStyle, {\n    id: \"3804077584\",\n    dynamic: [Theme.colors.coral, Theme.colors.coral, Theme.colors.coral, Theme.colors.coral]\n  }, [\".body.__jsx-style-dynamic-selector{float:left;width:100%;height:100%;z-index:1;overflow:hidden;}\", `.cat.__jsx-style-dynamic-selector{float:left;width:90%;padding:10px 5%;color:white;font:12px 'Roboto';background:${Theme.colors.coral};}`, \".update.__jsx-style-dynamic-selector{float:left;width:130px;text-align:center;font:12px 'Open Sans';padding:6px;opacity:.9;color:white;border-radius:8px;background:rgba(70,70,70,.6);-webkit-transition:opacity .4s ease;transition:opacity .4s ease;cursor:pointer;}\", \".update.__jsx-style-dynamic-selector:hover{opacity:1;}\", \".remove.__jsx-style-dynamic-selector{float:left;width:75px;text-align:center;font:12px 'Open Sans';margin-left:10px;padding:6px;opacity:.9;color:white;border-radius:8px;background:rgba(226,70,70,.8);cursor:pointer;}\", \".remove.__jsx-style-dynamic-selector:hover{opacity:1;}\", \".threedots.__jsx-style-dynamic-selector{position:absolute;top:-5px;right:-5px;width:20px;height:20px;padding:15px;cursor:pointer;}\", \".threedots.__jsx-style-dynamic-selector:hover~.floater.__jsx-style-dynamic-selector,.floater.__jsx-style-dynamic-selector:hover{opacity:1;-webkit-transform:translateX(100%) scale(1,1);-ms-transform:translateX(100%) scale(1,1);transform:translateX(100%) scale(1,1);}\", \".floater.__jsx-style-dynamic-selector{position:absolute;right:-2px;top:10px;-webkit-transform:translateX(0) scale(0,0);-ms-transform:translateX(0) scale(0,0);transform:translateX(0) scale(0,0);padding:4px;opacity:0;overflow:hidden;-webkit-transition:opacity .2s ease,-webkit-transform .4s;-webkit-transition:opacity .2s ease,transform .4s;transition:opacity .2s ease,transform .4s;border-radius:10px;-webkit-backdrop-filter:blur(8px);backdrop-filter:blur(8px);background:rgba(255,255,255,.7);box-shadow:0 0 1px rgba(20,20,20,.6);z-index:90;}\", `.task.__jsx-style-dynamic-selector{float:left;width:90%;padding:10px 5%;position:relative;border-top:1px solid ${Theme.colors.coral};}`, \".task.__jsx-style-dynamic-selector h2.__jsx-style-dynamic-selector{float:left;width:90%;padding:5px 5%;margin:0;font:14px 'Montserrat';}\", \".task.__jsx-style-dynamic-selector h3.__jsx-style-dynamic-selector{float:left;width:90%;padding:5px 5%;margin:0;font:12px 'Roboto';opacity:.8;}\", \"#abovelayer.__jsx-style-dynamic-selector{float:left;width:100%;height:100%;z-index:99;position:relative;margin-top:80px;}\", \"#abovelayer.__jsx-style-dynamic-selector textarea.__jsx-style-dynamic-selector{float:left;margin:10px 2.5%;padding:10px 2.5%;width:90%;font:18px 'Roboto';border:none;resize:vertical;max-height:150px;min-height:30px;border-radius:6px;box-shadow:0 0 2px rgba(20,20,20,.8);}\", \".sideleft.__jsx-style-dynamic-selector{float:left;width:23%;height:100%;z-index:99;margin:10px 1%;border-radius:10px;-webkit-backdrop-filter:blur(8px);backdrop-filter:blur(8px);background:rgba(255,255,255,.7);box-shadow:0 0 2px rgba(20,20,20,.8);}\", \".sideleft.__jsx-style-dynamic-selector h1.__jsx-style-dynamic-selector{float:left;margin:10px 5%;width:90%;font:20px 'Montserrat';}\", `.sideleft.__jsx-style-dynamic-selector form.__jsx-style-dynamic-selector{float:left;min-height:200px;width:90%;border-bottom:2px solid ${Theme.colors.coral};padding:10px 5%;}`, `.sideleft.__jsx-style-dynamic-selector button.__jsx-style-dynamic-selector{float:left;width:90%;padding:10px 5%;background:${Theme.colors.coral};color:white;cursor:pointer;border:none;border-radius:8px;margin:10px 5%;}`, \"#body_bg.__jsx-style-dynamic-selector{width:100%;z-index:-20;position:absolute;top:50%;left:50%;-webkit-transform:translate(-50%,-50%) scale(1.1,1.1);-ms-transform:translate(-50%,-50%) scale(1.1,1.1);transform:translate(-50%,-50%) scale(1.1,1.1);}\"]));\n}\n\nBackend.getInitialProps = async ctx => {\n  const cookies = await nextCookie(ctx);\n  const getfirsttasks = await getTasks(50, cookies.accessToken);\n\n  if (getfirsttasks == 'Not Authorized') {\n    if (ctx.res) {\n      ctx.res.writeHead(301, {\n        Location: '/login'\n      });\n      ctx.res.end();\n    }\n  }\n\n  getfirsttasks.sort(compare('status'));\n  return {\n    getFirstLoad: getfirsttasks\n  };\n};\n\nexport default Backend;","map":null,"metadata":{},"sourceType":"module"}