{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axios from 'axios';\nimport Router, { useRouter } from 'next/router';\nimport { Component } from 'react';\nimport nextCookie from 'next-cookies';\nimport { baseConfig } from './restservice';\nimport { Logout } from './apiservice';\nimport { post, get, postFile } from \"./restservice\"; // set up cookies\n\nasync function handleAuthSSR(ctx) {\n  const {\n    token\n  } = nextCookie(ctx);\n\n  try {\n    const response = await axios.get(baseConfig.baseURL + \"/user/restricted\", {\n      headers: {\n        'Authorization': 'Bearer ' + token\n      }\n    }); // dont really care about response, as long as it not an error\n\n    console.log(\"Golang Server Login Status ::\", response.data.status);\n  } catch (err) {\n    // in case of error\n    if (err.response) console.log(err.response.data.status);\n    console.log(\"redirecting back to main page\");\n\n    if (ctx.res) {\n      ctx.res.writeHead(302, {\n        Location: '/'\n      });\n      ctx.res.end();\n    } else {\n      Router.push('error', '/');\n      return null;\n    }\n  }\n\n  return token;\n}\n\nconst getDisplayName = Component => Component.displayName || Component.name || \"Component\";\n\nexport const withAuthSync = WrappedComponent => {\n  var _class, _temp;\n\n  return _temp = _class = class extends Component {\n    static async getInitialProps(ctx) {\n      const token = await handleAuthSSR(ctx);\n      const componentProps = WrappedComponent.getInitialProps && (await WrappedComponent.getInitialProps(ctx));\n      return _objectSpread(_objectSpread({}, componentProps), {}, {\n        token\n      });\n    }\n\n    render() {\n      return __jsx(WrappedComponent, this.props);\n    }\n\n  }, _defineProperty(_class, \"displayName\", `withAuthSync(${getDisplayName(WrappedComponent)})`), _temp;\n};","map":{"version":3,"sources":["/Users/williamforte/Canvas/burkedeveloping/services/auth.js"],"names":["axios","Router","useRouter","Component","nextCookie","baseConfig","Logout","post","get","postFile","handleAuthSSR","ctx","token","response","baseURL","headers","console","log","data","status","err","res","writeHead","Location","end","push","getDisplayName","displayName","name","withAuthSync","WrappedComponent","getInitialProps","componentProps","render","props"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,IAAiBC,SAAjB,QAAkC,aAAlC;AACA,SAAQC,SAAR,QAAwB,OAAxB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAAQC,UAAR,QAAyB,eAAzB;AACA,SAAQC,MAAR,QAAqB,cAArB;AACA,SAASC,IAAT,EAAeC,GAAf,EAAqBC,QAArB,QAAoC,eAApC,C,CACA;;AAEA,eAAeC,aAAf,CAA6BC,GAA7B,EAAkC;AAChC,QAAM;AAAEC,IAAAA;AAAF,MAAYR,UAAU,CAACO,GAAD,CAA5B;;AAEA,MAAI;AACF,UAAME,QAAQ,GAAG,MAAMb,KAAK,CAACQ,GAAN,CAAUH,UAAU,CAACS,OAAX,GAAqB,kBAA/B,EAAmD;AAAEC,MAAAA,OAAO,EAAE;AAAE,yBAAgB,YAAYH;AAA9B;AAAX,KAAnD,CAAvB,CADE,CAEF;;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ,EAA6CJ,QAAQ,CAACK,IAAT,CAAcC,MAA3D;AAED,GALD,CAKE,OAAOC,GAAP,EAAY;AACZ;AACA,QAAGA,GAAG,CAACP,QAAP,EAAiBG,OAAO,CAACC,GAAR,CAAYG,GAAG,CAACP,QAAJ,CAAaK,IAAb,CAAkBC,MAA9B;AACjBH,IAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;;AACA,QAAIN,GAAG,CAACU,GAAR,EAAa;AACXV,MAAAA,GAAG,CAACU,GAAJ,CAAQC,SAAR,CAAkB,GAAlB,EAAuB;AACrBC,QAAAA,QAAQ,EAAE;AADW,OAAvB;AAGAZ,MAAAA,GAAG,CAACU,GAAJ,CAAQG,GAAR;AACD,KALD,MAKO;AACLvB,MAAAA,MAAM,CAACwB,IAAP,CAAY,OAAZ,EAAqB,GAArB;AACA,aAAO,IAAP;AACD;AACF;;AACD,SAAOb,KAAP;AACD;;AAED,MAAMc,cAAc,GAAGvB,SAAS,IAC9BA,SAAS,CAACwB,WAAV,IAAyBxB,SAAS,CAACyB,IAAnC,IAA2C,WAD7C;;AAGA,OAAO,MAAMC,YAAY,GAAGC,gBAAgB;AAAA;;AAAA,0BAC1C,cAAc3B,SAAd,CAAwB;AAGtB,iBAAa4B,eAAb,CAA6BpB,GAA7B,EAAkC;AAChC,YAAMC,KAAK,GAAG,MAAMF,aAAa,CAACC,GAAD,CAAjC;AAEA,YAAMqB,cAAc,GAClBF,gBAAgB,CAACC,eAAjB,KACC,MAAMD,gBAAgB,CAACC,eAAjB,CAAiCpB,GAAjC,CADP,CADF;AAIA,6CAAYqB,cAAZ;AAA4BpB,QAAAA;AAA5B;AACD;;AAEDqB,IAAAA,MAAM,GAAG;AACP,aAAO,MAAC,gBAAD,EAAsB,KAAKC,KAA3B,CAAP;AACD;;AAfqB,GADkB,yCAElB,gBAAeR,cAAc,CAACI,gBAAD,CAAmB,GAF9B;AAAA,CAArC","sourcesContent":["import axios from 'axios';\nimport Router, { useRouter } from 'next/router';\nimport {Component} from 'react';\nimport nextCookie from 'next-cookies';\nimport {baseConfig} from './restservice';\nimport {Logout} from './apiservice';\nimport { post, get , postFile} from \"./restservice\";\n// set up cookies\n\nasync function handleAuthSSR(ctx) {\n  const { token } = nextCookie(ctx);\n\n  try {\n    const response = await axios.get(baseConfig.baseURL + \"/user/restricted\", { headers: { 'Authorization':'Bearer ' + token } });\n    // dont really care about response, as long as it not an error\n    console.log(\"Golang Server Login Status ::\", response.data.status)\n\n  } catch (err) {\n    // in case of error\n    if(err.response) console.log(err.response.data.status);\n    console.log(\"redirecting back to main page\");\n    if (ctx.res) {\n      ctx.res.writeHead(302, {\n        Location: '/'\n      })\n      ctx.res.end()\n    } else {\n      Router.push('error', '/')\n      return null\n    }\n  }\n  return token\n}\n\nconst getDisplayName = Component =>\n  Component.displayName || Component.name || \"Component\";\n\nexport const withAuthSync = WrappedComponent =>\n  class extends Component {\n    static displayName = `withAuthSync(${getDisplayName(WrappedComponent)})`;\n\n    static async getInitialProps(ctx) {\n      const token = await handleAuthSSR(ctx);\n\n      const componentProps =\n        WrappedComponent.getInitialProps &&\n        (await WrappedComponent.getInitialProps(ctx));\n\n      return { ...componentProps, token };\n    }\n\n    render() {\n      return <WrappedComponent {...this.props} />;\n    }\n  };"]},"metadata":{},"sourceType":"module"}