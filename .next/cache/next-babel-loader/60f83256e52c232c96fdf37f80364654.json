{"ast":null,"code":"import { Cookies } from 'react-cookie';\nimport { baseConfig } from './restservice';\nconst cookies = new Cookies();\nexport async function createProject(title, body, tags, images) {\n  const getCookies = cookies.getAll(); // New Login Data request\n\n  const newProject = await fetch(baseConfig.baseURL + '/projects', {\n    method: 'POST',\n    headers: {\n      \"Content-type\": \"application/json\",\n      \"Authorization\": `Bearer ${getCookies.accessToken}`\n    },\n    body: JSON.stringify({\n      \"title\": title,\n      \"body\": body,\n      \"tags\": tags,\n      \"images\": images\n    })\n  }).then(function (response) {\n    return response.json();\n  }).catch(function (error) {\n    return error;\n  });\n\n  if (newProject) {\n    return newProject;\n  }\n}\nexport async function getProjects(limit, token) {\n  const getCookies = cookies.getAll(); // New Login Data request\n\n  const newTask = await fetch('http://localhost:3600/tasks', {\n    method: 'GET',\n    headers: {\n      \"Content-type\": \"application/json\",\n      \"Authorization\": `Bearer ${getCookies.accessToken ? getCookies.accessToken : token}`\n    },\n    query: JSON.stringify({\n      \"limit\": limit\n    })\n  }).then(function (response) {\n    if (response.status == 403) {\n      return 'Not Authorized';\n    }\n\n    return response.json();\n  }).catch(function (error) {\n    return error;\n  });\n\n  if (newTask) {\n    return newTask;\n  }\n}\nexport async function removeTask(taskId) {\n  const getCookies = cookies.getAll(); // New Login Data request\n\n  const newTask = await fetch(`http://localhost:3600/tasks/${taskId}`, {\n    method: 'DELETE',\n    headers: {\n      \"Authorization\": `Bearer ${getCookies.accessToken ? getCookies.accessToken : token}`\n    }\n  }).then(function (response) {\n    return response.json();\n  }).catch(function (error) {\n    return error;\n  });\n\n  if (newTask) {\n    return newTask;\n  }\n}\nexport async function updateTaskStatus(taskId, newstatus) {\n  const getCookies = cookies.getAll(); // New Login Data request\n\n  const newTask = await fetch(`http://localhost:3600/tasks/${taskId}`, {\n    method: 'PATCH',\n    headers: {\n      \"Content-type\": \"application/json\",\n      \"Authorization\": `Bearer ${getCookies.accessToken ? getCookies.accessToken : token}`\n    },\n    body: JSON.stringify({\n      \"status\": newstatus\n    })\n  }).then(function (response) {\n    return response.json();\n  }).catch(function (error) {\n    return error;\n  });\n\n  if (newTask) {\n    return newTask;\n  }\n}","map":{"version":3,"sources":["/Users/williamforte/Canvas/burkedeveloping/services/projectservice.js"],"names":["Cookies","baseConfig","cookies","createProject","title","body","tags","images","getCookies","getAll","newProject","fetch","baseURL","method","headers","accessToken","JSON","stringify","then","response","json","catch","error","getProjects","limit","token","newTask","query","status","removeTask","taskId","updateTaskStatus","newstatus"],"mappings":"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","sourcesContent":["import { Cookies } from 'react-cookie';\nimport { baseConfig } from './restservice' \n\nconst cookies = new Cookies();\n\nexport async function createProject(title, body, tags, images) {\n    \n    const getCookies = cookies.getAll()\n    // New Login Data request\n    const newProject = await fetch(baseConfig.baseURL + '/projects', {\n        method: 'POST',\n        headers: {\n            \"Content-type\": \"application/json\",\n            \"Authorization\": `Bearer ${getCookies.accessToken}`\n        },\n        body: JSON.stringify({\n            \"title\": title,\n            \"body\": body,\n            \"tags\": tags,\n            \"images\": images\n        })\n    })\n    .then(function(response) {\n        return response.json();\n    })\n    .catch(function(error) {\n        return error\n    });\n    if(newProject) {\n        return newProject\n    }\n}\n\nexport async function getProjects(limit, token) {\n    \n    const getCookies = cookies.getAll()\n    // New Login Data request\n    const newTask = await fetch('http://localhost:3600/tasks', {\n        method: 'GET',\n        headers: {\n            \"Content-type\": \"application/json\",\n            \"Authorization\": `Bearer ${getCookies.accessToken ? getCookies.accessToken: token}`\n        },\n        query: JSON.stringify({\n            \"limit\": limit\n        })\n    })\n    .then(function(response) {\n        if(response.status == 403) {\n            return 'Not Authorized'\n        }\n        return response.json();\n    })\n    .catch(function(error) {\n        return error\n    });\n    if(newTask) {\n        return newTask\n    }\n}\n\nexport async function removeTask(taskId) {\n    \n    const getCookies = cookies.getAll()\n    // New Login Data request\n    const newTask = await fetch(`http://localhost:3600/tasks/${taskId}`, {\n        method: 'DELETE',\n        headers: {\n            \"Authorization\": `Bearer ${getCookies.accessToken ? getCookies.accessToken: token}`\n        }\n    })\n    .then(function(response) {\n        return response.json();\n    })\n    .catch(function(error) {\n        return error\n    });\n    if(newTask) {\n        return newTask\n    }\n}\n\nexport async function updateTaskStatus(taskId, newstatus) {\n    \n    const getCookies = cookies.getAll()\n    // New Login Data request\n    const newTask = await fetch(`http://localhost:3600/tasks/${taskId}`, {\n        method: 'PATCH',\n        headers: {\n            \"Content-type\": \"application/json\",\n            \"Authorization\": `Bearer ${getCookies.accessToken ? getCookies.accessToken: token}`\n        },\n        body: JSON.stringify({\n            \"status\": newstatus\n        })\n    })\n    .then(function(response) {\n        return response.json();\n    })\n    .catch(function(error) {\n        return error\n    });\n    if(newTask) {\n        return newTask\n    }\n}"]},"metadata":{},"sourceType":"module"}