{"ast":null,"code":"import _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createTask, getTasks, removeTask, updateTaskStatus } from '../../services/apiservice';\nimport { useState, useEffect } from 'react';\nimport Router from 'next/router';\nimport nextCookie from 'next-cookies';\nimport Theme from '../../styles/theme';\nconst sortingOrder = {\n  'inprogress': 1,\n  'created': 2,\n  'done': 3\n};\nexport function compare(key, order = 'asc') {\n  return function (a, b) {\n    if (!a.hasOwnProperty(key) || !b.hasOwnProperty(key)) return 0;\n    const first = a[key].toLowerCase() in sortingOrder ? sortingOrder[a[key]] : Number.MAX_SAFE_INTEGER;\n    const second = b[key].toLowerCase() in sortingOrder ? sortingOrder[b[key]] : Number.MAX_SAFE_INTEGER;\n    let result = 0;\n    if (first < second) result = -1;else if (first > second) result = 1;\n    return order === 'desc' ? ~result : result;\n  };\n}\n\nconst HamEx = ({\n  onClick,\n  color,\n  width,\n  height,\n  active\n}) => {\n  return __jsx(\"div\", {\n    onClick: onClick,\n    className: _JSXStyle.dynamic([[\"1318293250\", [width, height, color]]]) + \" \" + 'hame'\n  }, __jsx(\"div\", {\n    className: _JSXStyle.dynamic([[\"1318293250\", [width, height, color]]]) + \" \" + `slash ${active == true ? 'one' : ''}`\n  }), __jsx(\"div\", {\n    className: _JSXStyle.dynamic([[\"1318293250\", [width, height, color]]]) + \" \" + `slash ${active == true ? 'two' : ''}`\n  }), __jsx(\"div\", {\n    className: _JSXStyle.dynamic([[\"1318293250\", [width, height, color]]]) + \" \" + `slash ${active == true ? 'three' : ''}`\n  }), __jsx(_JSXStyle, {\n    id: \"1318293250\",\n    dynamic: [width, height, color]\n  }, [`.hame.__jsx-style-dynamic-selector{float:left;width:${width}px;height:${height}px;padding:10px;position:relative;cursor:pointer;}`, `.slash.__jsx-style-dynamic-selector{float:left;width:100%;height:8px;border-radius:8px;background:${color};margin:2px 0;-webkit-transition:all .4s ease;transition:all .4s ease;}`, \".one.__jsx-style-dynamic-selector{-webkit-transform:translateY(12px) rotate(45deg);-ms-transform:translateY(12px) rotate(45deg);transform:translateY(12px) rotate(45deg);}\", \".two.__jsx-style-dynamic-selector{opacity:0;}\", \".three.__jsx-style-dynamic-selector{-webkit-transform:translateY(-12px) rotate(-45deg);-ms-transform:translateY(-12px) rotate(-45deg);transform:translateY(-12px) rotate(-45deg);}\"]));\n};\n\nfunction TaskManager({\n  getFirstLoad\n}) {\n  const {\n    0: inputs,\n    1: setInputs\n  } = useState({\n    objective: '',\n    status: 'created'\n  });\n  const {\n    0: sortedTasks,\n    1: setSortedTasks\n  } = useState({\n    inprogress: [],\n    created: [],\n    done: []\n  });\n  const {\n    0: allTasks,\n    1: setAllTasks\n  } = useState(getFirstLoad != null ? getFirstLoad : null);\n  const {\n    0: status,\n    1: setStatus\n  } = useState(getFirstLoad != null ? 'succeeded' : 'none');\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  let lastcat = null; // Create a new Task DEFAULT: status: 'created'\n\n  const createNewTask = async e => {\n    e.preventDefault();\n    const newTask = await createTask(inputs.objective, inputs.status);\n\n    if (newTask) {\n      console.log(newTask);\n      setInputs(_objectSpread(_objectSpread({}, inputs), {}, {\n        objective: ''\n      }));\n      updateTasks(e);\n    }\n  };\n\n  const sortAllTasks = tasks => {\n    const inp = [];\n    const cr = [];\n    const dn = [];\n    tasks.map(task => {\n      if (task.status === 'done') dn.push(task);\n      if (task.status === 'created') cr.push(task);\n      if (task.status === 'inprogress') inp.push(task);\n    });\n    setSortedTasks(_objectSpread(_objectSpread({}, sortedTasks), {}, {\n      inprogress: inp,\n      created: cr,\n      done: dn\n    }));\n  };\n\n  useEffect(() => {\n    sortAllTasks(getFirstLoad);\n    console.log(sortedTasks);\n  }, [sortedTasks.done.length == 0]); // Updating Tasks with Backend\n\n  const updateTasks = async e => {\n    setStatus('loading');\n    const getalltasks = await getTasks(50, null);\n\n    if (getalltasks) {\n      console.log(getalltasks);\n      getalltasks.sort(compare('status'));\n      setAllTasks(getalltasks);\n      sortAllTasks(getalltasks);\n      setStatus('succeeded');\n    }\n  };\n\n  const removeThisTask = async (e, task_id) => {\n    e.preventDefault();\n    const removenewtask = await removeTask(task_id);\n\n    if (removenewtask) {\n      console.log(removenewtask);\n      updateTasks(e);\n    }\n  };\n\n  const updateThisTask = async (e, task_id, status) => {\n    e.preventDefault();\n    const updatenewtask = await updateTaskStatus(task_id, status);\n\n    if (updatenewtask) {\n      console.log(updatenewtask);\n      updateTasks(e);\n    }\n  };\n\n  const isTyping = e => {\n    e.persist();\n    setInputs(_objectSpread(_objectSpread({}, inputs), {}, {\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  return __jsx(\"div\", {\n    className: _JSXStyle.dynamic([[\"3161495724\", [Theme.colors.shadowlight, Theme.colors.gunmetal, Theme.colors.platinum, Theme.colors.shadowlight, Theme.colors.lightplatinum, Theme.colors.royalblue]]]) + \" \" + 'maindiv'\n  }, __jsx(\"h1\", {\n    className: _JSXStyle.dynamic([[\"3161495724\", [Theme.colors.shadowlight, Theme.colors.gunmetal, Theme.colors.platinum, Theme.colors.shadowlight, Theme.colors.lightplatinum, Theme.colors.royalblue]]])\n  }, \"My Tasks\"), __jsx(\"div\", {\n    className: _JSXStyle.dynamic([[\"3161495724\", [Theme.colors.shadowlight, Theme.colors.gunmetal, Theme.colors.platinum, Theme.colors.shadowlight, Theme.colors.lightplatinum, Theme.colors.royalblue]]]) + \" \" + 'tasklist'\n  }, __jsx(\"div\", {\n    className: _JSXStyle.dynamic([[\"3161495724\", [Theme.colors.shadowlight, Theme.colors.gunmetal, Theme.colors.platinum, Theme.colors.shadowlight, Theme.colors.lightplatinum, Theme.colors.royalblue]]]) + \" \" + 'column'\n  }, __jsx(\"form\", {\n    onSubmit: createNewTask,\n    className: _JSXStyle.dynamic([[\"3161495724\", [Theme.colors.shadowlight, Theme.colors.gunmetal, Theme.colors.platinum, Theme.colors.shadowlight, Theme.colors.lightplatinum, Theme.colors.royalblue]]])\n  }, __jsx(\"h1\", {\n    className: _JSXStyle.dynamic([[\"3161495724\", [Theme.colors.shadowlight, Theme.colors.gunmetal, Theme.colors.platinum, Theme.colors.shadowlight, Theme.colors.lightplatinum, Theme.colors.royalblue]]])\n  }, \"New Task\"), __jsx(\"textarea\", {\n    name: \"objective\",\n    onChange: isTyping,\n    value: inputs.objective,\n    placeholder: \"Objective\",\n    required: true,\n    className: _JSXStyle.dynamic([[\"3161495724\", [Theme.colors.shadowlight, Theme.colors.gunmetal, Theme.colors.platinum, Theme.colors.shadowlight, Theme.colors.lightplatinum, Theme.colors.royalblue]]])\n  }), __jsx(\"button\", {\n    className: _JSXStyle.dynamic([[\"3161495724\", [Theme.colors.shadowlight, Theme.colors.gunmetal, Theme.colors.platinum, Theme.colors.shadowlight, Theme.colors.lightplatinum, Theme.colors.royalblue]]])\n  }, \"Add Task\"))), __jsx(\"div\", {\n    className: _JSXStyle.dynamic([[\"3161495724\", [Theme.colors.shadowlight, Theme.colors.gunmetal, Theme.colors.platinum, Theme.colors.shadowlight, Theme.colors.lightplatinum, Theme.colors.royalblue]]]) + \" \" + 'column'\n  }, __jsx(\"div\", {\n    className: _JSXStyle.dynamic([[\"3161495724\", [Theme.colors.shadowlight, Theme.colors.gunmetal, Theme.colors.platinum, Theme.colors.shadowlight, Theme.colors.lightplatinum, Theme.colors.royalblue]]]) + \" \" + 'cat'\n  }, \"Newly Added Tasks\"), sortedTasks.created.length > 0 ? sortedTasks.created.map((task, i) => {\n    let nextStatus = task.status == 'created' ? 'inprogress' : 'done';\n    return __jsx(\"div\", {\n      key: i,\n      className: _JSXStyle.dynamic([[\"3161495724\", [Theme.colors.shadowlight, Theme.colors.gunmetal, Theme.colors.platinum, Theme.colors.shadowlight, Theme.colors.lightplatinum, Theme.colors.royalblue]]]) + \" \" + 'task'\n    }, __jsx(\"h2\", {\n      className: _JSXStyle.dynamic([[\"3161495724\", [Theme.colors.shadowlight, Theme.colors.gunmetal, Theme.colors.platinum, Theme.colors.shadowlight, Theme.colors.lightplatinum, Theme.colors.royalblue]]])\n    }, \"Objective: \", task.objective), __jsx(\"h3\", {\n      className: _JSXStyle.dynamic([[\"3161495724\", [Theme.colors.shadowlight, Theme.colors.gunmetal, Theme.colors.platinum, Theme.colors.shadowlight, Theme.colors.lightplatinum, Theme.colors.royalblue]]])\n    }, \"Status: \", task.status), __jsx(\"img\", {\n      src: \"/three_dots.png\",\n      className: _JSXStyle.dynamic([[\"3161495724\", [Theme.colors.shadowlight, Theme.colors.gunmetal, Theme.colors.platinum, Theme.colors.shadowlight, Theme.colors.lightplatinum, Theme.colors.royalblue]]]) + \" \" + 'threedots'\n    }), __jsx(\"div\", {\n      className: _JSXStyle.dynamic([[\"3161495724\", [Theme.colors.shadowlight, Theme.colors.gunmetal, Theme.colors.platinum, Theme.colors.shadowlight, Theme.colors.lightplatinum, Theme.colors.royalblue]]]) + \" \" + 'floater'\n    }, __jsx(\"div\", {\n      onClick: e => {\n        task.status = nextStatus;\n        updateThisTask(e, task.id, nextStatus);\n      },\n      className: _JSXStyle.dynamic([[\"3161495724\", [Theme.colors.shadowlight, Theme.colors.gunmetal, Theme.colors.platinum, Theme.colors.shadowlight, Theme.colors.lightplatinum, Theme.colors.royalblue]]]) + \" \" + 'update'\n    }, \"Update Status\"), __jsx(\"div\", {\n      onClick: e => removeThisTask(e, task.id),\n      className: _JSXStyle.dynamic([[\"3161495724\", [Theme.colors.shadowlight, Theme.colors.gunmetal, Theme.colors.platinum, Theme.colors.shadowlight, Theme.colors.lightplatinum, Theme.colors.royalblue]]]) + \" \" + 'remove'\n    }, \"Remove Task\")));\n  }) : __jsx(\"p\", {\n    className: _JSXStyle.dynamic([[\"3161495724\", [Theme.colors.shadowlight, Theme.colors.gunmetal, Theme.colors.platinum, Theme.colors.shadowlight, Theme.colors.lightplatinum, Theme.colors.royalblue]]]) + \" \" + 'info'\n  }, \"No Newly Created Tasks\")), __jsx(\"div\", {\n    className: _JSXStyle.dynamic([[\"3161495724\", [Theme.colors.shadowlight, Theme.colors.gunmetal, Theme.colors.platinum, Theme.colors.shadowlight, Theme.colors.lightplatinum, Theme.colors.royalblue]]]) + \" \" + 'column'\n  }, __jsx(\"div\", {\n    className: _JSXStyle.dynamic([[\"3161495724\", [Theme.colors.shadowlight, Theme.colors.gunmetal, Theme.colors.platinum, Theme.colors.shadowlight, Theme.colors.lightplatinum, Theme.colors.royalblue]]]) + \" \" + 'cat'\n  }, \"Tasks in Progress\"), sortedTasks.inprogress.length > 0 ? sortedTasks.inprogress.map((task, i) => {\n    let nextStatus = task.status == 'created' ? 'inprogress' : 'done';\n    return __jsx(\"div\", {\n      key: i,\n      className: _JSXStyle.dynamic([[\"3161495724\", [Theme.colors.shadowlight, Theme.colors.gunmetal, Theme.colors.platinum, Theme.colors.shadowlight, Theme.colors.lightplatinum, Theme.colors.royalblue]]]) + \" \" + 'task'\n    }, __jsx(\"h2\", {\n      className: _JSXStyle.dynamic([[\"3161495724\", [Theme.colors.shadowlight, Theme.colors.gunmetal, Theme.colors.platinum, Theme.colors.shadowlight, Theme.colors.lightplatinum, Theme.colors.royalblue]]])\n    }, \"Objective: \", task.objective), __jsx(\"h3\", {\n      className: _JSXStyle.dynamic([[\"3161495724\", [Theme.colors.shadowlight, Theme.colors.gunmetal, Theme.colors.platinum, Theme.colors.shadowlight, Theme.colors.lightplatinum, Theme.colors.royalblue]]])\n    }, \"Status: \", task.status), __jsx(\"img\", {\n      src: \"/three_dots.png\",\n      className: _JSXStyle.dynamic([[\"3161495724\", [Theme.colors.shadowlight, Theme.colors.gunmetal, Theme.colors.platinum, Theme.colors.shadowlight, Theme.colors.lightplatinum, Theme.colors.royalblue]]]) + \" \" + 'threedots'\n    }), __jsx(\"div\", {\n      className: _JSXStyle.dynamic([[\"3161495724\", [Theme.colors.shadowlight, Theme.colors.gunmetal, Theme.colors.platinum, Theme.colors.shadowlight, Theme.colors.lightplatinum, Theme.colors.royalblue]]]) + \" \" + 'floater'\n    }, __jsx(\"div\", {\n      onClick: e => {\n        task.status = nextStatus;\n        updateThisTask(e, task.id, nextStatus);\n      },\n      className: _JSXStyle.dynamic([[\"3161495724\", [Theme.colors.shadowlight, Theme.colors.gunmetal, Theme.colors.platinum, Theme.colors.shadowlight, Theme.colors.lightplatinum, Theme.colors.royalblue]]]) + \" \" + 'update'\n    }, \"Update Status\"), __jsx(\"div\", {\n      onClick: e => removeThisTask(e, task.id),\n      className: _JSXStyle.dynamic([[\"3161495724\", [Theme.colors.shadowlight, Theme.colors.gunmetal, Theme.colors.platinum, Theme.colors.shadowlight, Theme.colors.lightplatinum, Theme.colors.royalblue]]]) + \" \" + 'remove'\n    }, \"Remove Task\")));\n  }) : __jsx(\"p\", {\n    className: _JSXStyle.dynamic([[\"3161495724\", [Theme.colors.shadowlight, Theme.colors.gunmetal, Theme.colors.platinum, Theme.colors.shadowlight, Theme.colors.lightplatinum, Theme.colors.royalblue]]]) + \" \" + 'info'\n  }, \"No In Progress Tasks\")), __jsx(\"div\", {\n    className: _JSXStyle.dynamic([[\"3161495724\", [Theme.colors.shadowlight, Theme.colors.gunmetal, Theme.colors.platinum, Theme.colors.shadowlight, Theme.colors.lightplatinum, Theme.colors.royalblue]]]) + \" \" + 'column'\n  }, __jsx(\"div\", {\n    className: _JSXStyle.dynamic([[\"3161495724\", [Theme.colors.shadowlight, Theme.colors.gunmetal, Theme.colors.platinum, Theme.colors.shadowlight, Theme.colors.lightplatinum, Theme.colors.royalblue]]]) + \" \" + 'cat'\n  }, \"Done\"), sortedTasks.done.length > 0 ? sortedTasks.done.map((task, i) => {\n    let nextStatus = task.status == 'created' ? 'inprogress' : 'done';\n    return __jsx(\"div\", {\n      key: i,\n      className: _JSXStyle.dynamic([[\"3161495724\", [Theme.colors.shadowlight, Theme.colors.gunmetal, Theme.colors.platinum, Theme.colors.shadowlight, Theme.colors.lightplatinum, Theme.colors.royalblue]]]) + \" \" + 'task'\n    }, __jsx(\"h2\", {\n      className: _JSXStyle.dynamic([[\"3161495724\", [Theme.colors.shadowlight, Theme.colors.gunmetal, Theme.colors.platinum, Theme.colors.shadowlight, Theme.colors.lightplatinum, Theme.colors.royalblue]]])\n    }, \"Objective: \", task.objective), __jsx(\"h3\", {\n      className: _JSXStyle.dynamic([[\"3161495724\", [Theme.colors.shadowlight, Theme.colors.gunmetal, Theme.colors.platinum, Theme.colors.shadowlight, Theme.colors.lightplatinum, Theme.colors.royalblue]]])\n    }, \"Status: \", task.status), __jsx(\"img\", {\n      src: \"/three_dots.png\",\n      className: _JSXStyle.dynamic([[\"3161495724\", [Theme.colors.shadowlight, Theme.colors.gunmetal, Theme.colors.platinum, Theme.colors.shadowlight, Theme.colors.lightplatinum, Theme.colors.royalblue]]]) + \" \" + 'threedots'\n    }), __jsx(\"div\", {\n      className: _JSXStyle.dynamic([[\"3161495724\", [Theme.colors.shadowlight, Theme.colors.gunmetal, Theme.colors.platinum, Theme.colors.shadowlight, Theme.colors.lightplatinum, Theme.colors.royalblue]]]) + \" \" + 'floater'\n    }, __jsx(\"div\", {\n      onClick: e => {\n        task.status = nextStatus;\n        updateThisTask(e, task.id, nextStatus);\n      },\n      className: _JSXStyle.dynamic([[\"3161495724\", [Theme.colors.shadowlight, Theme.colors.gunmetal, Theme.colors.platinum, Theme.colors.shadowlight, Theme.colors.lightplatinum, Theme.colors.royalblue]]]) + \" \" + 'update'\n    }, \"Update Status\"), __jsx(\"div\", {\n      onClick: e => removeThisTask(e, task.id),\n      className: _JSXStyle.dynamic([[\"3161495724\", [Theme.colors.shadowlight, Theme.colors.gunmetal, Theme.colors.platinum, Theme.colors.shadowlight, Theme.colors.lightplatinum, Theme.colors.royalblue]]]) + \" \" + 'remove'\n    }, \"Remove Task\")));\n  }) : __jsx(\"p\", {\n    className: _JSXStyle.dynamic([[\"3161495724\", [Theme.colors.shadowlight, Theme.colors.gunmetal, Theme.colors.platinum, Theme.colors.shadowlight, Theme.colors.lightplatinum, Theme.colors.royalblue]]]) + \" \" + 'info'\n  }, \"No Completed Tasks\"))), __jsx(\"img\", {\n    id: \"body_bg\",\n    src: \"/bg_login.png\",\n    className: _JSXStyle.dynamic([[\"3161495724\", [Theme.colors.shadowlight, Theme.colors.gunmetal, Theme.colors.platinum, Theme.colors.shadowlight, Theme.colors.lightplatinum, Theme.colors.royalblue]]])\n  }), __jsx(_JSXStyle, {\n    id: \"3161495724\",\n    dynamic: [Theme.colors.shadowlight, Theme.colors.gunmetal, Theme.colors.platinum, Theme.colors.shadowlight, Theme.colors.lightplatinum, Theme.colors.royalblue]\n  }, [\".info.__jsx-style-dynamic-selector{float:left;font:14px 'Open Sans';}\", `.column.__jsx-style-dynamic-selector{float:left;width:23%;margin:10px 1%;padding:10px 1%;border-radius:10px;box-shadow:${Theme.colors.shadowlight};background:rgba(255,255,255,.7);-webkit-backdrop-filter:blur(8px);backdrop-filter:blur(8px);}`, `.cat.__jsx-style-dynamic-selector{float:left;width:90%;padding:14px 5%;color:white;margin:20px 0;border-radius:10px;font:14px 'Roboto';background:${Theme.colors.gunmetal};}`, \".tasktoggle.__jsx-style-dynamic-selector{float:left;width:100px;height:100px;padding:10px;}\", `.update.__jsx-style-dynamic-selector{float:left;width:100%;padding:8px 0;text-align:center;font:12px 'Open Sans';opacity:.8;-webkit-transition:all .3s ease;transition:all .3s ease;background:${Theme.colors.platinum};cursor:pointer;}`, \".update.__jsx-style-dynamic-selector:hover{opacity:1;background:white;}\", \".remove.__jsx-style-dynamic-selector{float:left;width:100%;padding:8px 0;text-align:center;font:12px 'Open Sans';opacity:.8;color:white;-webkit-transition:all .3s ease;transition:all .3s ease;background:rgba(226,70,70,.8);cursor:pointer;}\", \".remove.__jsx-style-dynamic-selector:hover{opacity:1;}\", \".threedots.__jsx-style-dynamic-selector{position:absolute;top:-5px;right:3px;width:20px;height:20px;padding:15px;cursor:pointer;}\", \".threedots.__jsx-style-dynamic-selector:hover~.floater.__jsx-style-dynamic-selector,.floater.__jsx-style-dynamic-selector:hover{opacity:1;-webkit-transform:translateX(100%) scale(1,1);-ms-transform:translateX(100%) scale(1,1);transform:translateX(100%) scale(1,1);}\", \".floater.__jsx-style-dynamic-selector{position:absolute;right:125px;top:-10px;width:120px;-webkit-transform:translateX(0) scale(0,0);-ms-transform:translateX(0) scale(0,0);transform:translateX(0) scale(0,0);padding:0;opacity:0;border-radius:10px;overflow:hidden;-webkit-transition:opacity .2s ease,-webkit-transform .4s;-webkit-transition:opacity .2s ease,transform .4s;transition:opacity .2s ease,transform .4s;-webkit-backdrop-filter:blur(8px);backdrop-filter:blur(8px);background:rgba(255,255,255,.8);box-shadow:0 0 2px rgba(20,20,20,.6);z-index:9999;}\", \".tasklist.__jsx-style-dynamic-selector{float:left;width:100%;-webkit-transition:all .2s ease;transition:all .2s ease;padding:30px 0;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;}\", `.task.__jsx-style-dynamic-selector{float:left;width:90%;position:relative;padding:10px 5%;margin:10px 0;min-height:120px;border-radius:30px;box-shadow:${Theme.colors.shadowlight};background:${Theme.colors.lightplatinum};}`, \".task.__jsx-style-dynamic-selector h2.__jsx-style-dynamic-selector{float:left;width:90%;padding:5px 5%;margin:0;font:13px 'Open Sans';margin-top:10px;}\", \".task.__jsx-style-dynamic-selector h3.__jsx-style-dynamic-selector{float:left;width:90%;padding:5px 5%;margin:0;font:12px 'Roboto';opacity:.8;}\", \".maindiv.__jsx-style-dynamic-selector textarea.__jsx-style-dynamic-selector{float:left;margin:10px 2.5%;padding:10px 2.5%;width:90%;font:18px 'Roboto';border:none;resize:vertical;max-height:150px;min-height:120px;border-radius:6px;box-shadow:0 0 2px rgba(20,20,20,.8);}\", \".maindiv.__jsx-style-dynamic-selector{float:left;width:100%;z-index:9999;margin:20px 0;margin-top:90px;-webkit-backdrop-filter:blur(8px);backdrop-filter:blur(8px);background:rgba(255,255,255,.9);}\", \".maindiv.__jsx-style-dynamic-selector h1.__jsx-style-dynamic-selector{float:left;margin:10px 5%;width:90%;font:20px 'Montserrat';}\", \".maindiv.__jsx-style-dynamic-selector form.__jsx-style-dynamic-selector{float:left;width:90%;-webkit-transition:all .2s ease;transition:all .2s ease;padding:10px 5%;}\", \"#body_bg.__jsx-style-dynamic-selector{width:100%;z-index:-20;position:fixed;top:50%;left:50%;-webkit-transform:translate(-50%,-50%) scale(1.1,1.1);-ms-transform:translate(-50%,-50%) scale(1.1,1.1);transform:translate(-50%,-50%) scale(1.1,1.1);}\", `.maindiv.__jsx-style-dynamic-selector button.__jsx-style-dynamic-selector{float:left;width:90%;padding:10px 5%;background:${Theme.colors.royalblue};color:white;cursor:pointer;border:none;border-radius:8px;margin:10px 5%;}`]));\n}\n\nTaskManager.getInitialProps = async ctx => {\n  const cookies = await nextCookie(ctx);\n  const getfirsttasks = await getTasks(50, cookies.accessToken);\n\n  if (getfirsttasks == 'Not Authorized') {\n    if (ctx.res) {\n      ctx.res.writeHead(301, {\n        Location: '/login'\n      });\n      ctx.res.end();\n    }\n  }\n\n  getfirsttasks.sort(compare('status'));\n  return {\n    getFirstLoad: getfirsttasks\n  };\n};\n\nexport default TaskManager;","map":null,"metadata":{},"sourceType":"module"}