{"ast":null,"code":"import { catchAxiosError } from \"./error\";\nimport { post, get, postFile } from \"./restservice\";\nimport Router from 'next/router';\nimport { Cookies } from 'react-cookie';\nconst cookies = new Cookies();\nexport const backendImages = \"https://uplink.work/restapi/uploadimages/\";\nexport async function createProfile(fullname, email, newpassword, image) {\n  // Request data to post to createprofile route on rest api\n  const data = new URLSearchParams({\n    fullname,\n    email,\n    newpassword,\n    image\n  });\n  const res = await post(\"/createprofile\", data).catch(catchAxiosError);\n  if (res.error) return res.error;\n  if (!res.data) return \"Something wrong\";\n  return res.data.status;\n}\nexport async function resetPassword(email, newpassword) {\n  const data = new URLSearchParams({\n    email,\n    newpassword\n  });\n  const res = await post(\"/resetpass\", data).catch(catchAxiosError);\n  if (res.error) return res.error;\n  return res.data.status;\n}\nexport async function confirmEmail(fullname, email) {\n  const data = new URLSearchParams({\n    fullname,\n    email\n  });\n  const res = await post(\"/confirmemailzr\", data).catch(catchAxiosError);\n  if (res.error) return res.error;\n  return res.data.message;\n}\nexport async function forgotPass(email) {\n  const data = new URLSearchParams({\n    email\n  });\n  const res = await post(\"/forgotpass\", data).catch(catchAxiosError);\n  if (res.error) return res.error;\n  return res.data.message;\n}\nexport async function checkConfirm(email, confirmation) {\n  const data = new URLSearchParams({\n    email,\n    confirmation\n  });\n  const res = await post(\"/checkconfirm\", data).catch(catchAxiosError);\n  if (res.error) return res.error;\n  if (res.data) return res.data.status;\n}\nexport async function deleteProfile(user) {\n  const res = await get(`/removeuser/${user}`);\n  if (res.data) return res.data;\n  if (res.error) return res.error;\n  return res.data;\n}\nexport async function removeFile(filename) {\n  const res = await get(`/removefile/${filename}`).then(res => {\n    if (res.error) return res.error;\n    console.log(res.data.status);\n    return res.data.status;\n  });\n}\nexport async function removeUserFile(filepath, user) {\n  const data = new URLSearchParams({\n    filepath,\n    user\n  });\n  const res = await post(\"/removefile\", data).catch(catchAxiosError);\n  if (res.error) return res.error;\n  return res.data.status;\n}\nexport const COOKIES = {\n  logintoken: \"indexplus.token.secured\"\n};\nexport async function Logout() {\n  cookies.remove('token');\n  localStorage.removeItem('user');\n  localStorage.removeItem('userFullName');\n  localStorage.removeItem('authorization');\n  localStorage.removeItem('expiration');\n  localStorage.removeItem('sub');\n  console.log(\"User logged out\");\n  await Router.push(\"/login\");\n}\nexport async function loginRequest(email, password) {\n  // New Login Data request\n  const data = new URLSearchParams({\n    email,\n    password\n  });\n  const res = await post(\"/login\", data).catch(catchAxiosError);\n  if (res.error) return res.error;\n\n  if (res.data.error) {\n    return res.data.error;\n  }\n\n  const {\n    token\n  } = res.data.value;\n  localStorage.setItem('user', res.data.email);\n  localStorage.setItem('userFullName', res.data.fullname);\n  localStorage.setItem('authorization', res.data.value);\n  localStorage.setItem('expiration', res.data.exp);\n  localStorage.setItem('sub', res.data.sub);\n  cookies.set('token', res.data.value);\n  Router.push(\"/\");\n}\nexport async function getProfile(user) {\n  const res = await get(`/getprofile/${user}`);\n  if (res.error) return res.error;\n  return res.data;\n}\nexport async function getStaticImages() {\n  const res = await get(\"/uploadedimages\");\n  return res.data;\n}\nexport async function getUserImages(user) {\n  const res = await get(`/uploadedimages/${user}`);\n  return res.data;\n} // Store Item and Post Upload Endpoints //\n\nexport async function getStoreItems(store) {\n  const res = await get(`/getstoreitems/${store}`);\n  if (res.error) return res.error;\n  if (!res.data) return \"Did not load or no items yet...\";\n  return res.data;\n}\nexport async function getStoreItemsByUser(owner) {\n  const res = await get(`/getstoreitemsbyuser/${owner}`);\n  if (res.error) return res.error;\n  if (!res.data) return \"Did not load or no items yet...\";\n  return res.data;\n}\nexport async function getStorePosts(store) {\n  const res = await get(`/getstoreposts/${store}`);\n  if (res.error) return \"noresponse\";\n  if (!res.data) return \"Did not load or no posts yet...\";\n  console.log(\"called get posts\");\n  return res.data;\n}\nexport async function getStorePost(postid) {\n  const res = await get(`/getstorepost/${postid}`);\n  if (res.error) return res.error;\n  if (!res.data) return \"Did not load the post\";\n  return res.data;\n}\nexport async function getStoreItem(itemid) {\n  const res = await get(`/getstoreitem/${itemid}`);\n  if (res.error) return res.error;\n  if (!res.data) return \"Did not load the item\";\n  return res.data;\n}\nexport async function likeItem(itemid) {\n  const res = await get(`/likeitem/${itemid}`);\n  if (res.error) return res.error;\n  return res.data.status;\n}\nexport async function dislikeItem(itemid) {\n  const res = await get(`/dislikeitem/${itemid}`);\n  if (res.error) return res.error;\n  return res.data.status;\n}\nexport async function getItemComments(itemid) {\n  const res = await get(`/getcomments/${itemid}`);\n  if (res.error) return res.error;\n  return res.data;\n}\nexport async function makeComment(owner, commentstring, connectingitem, rating) {\n  const data = new URLSearchParams({\n    owner,\n    commentstring,\n    connectingitem,\n    rating\n  });\n  const res = await post(\"/makecomment\", data).catch(catchAxiosError);\n  if (res.error) return res.error;\n  if (res.data) return res.data.status;\n}\nexport async function getStoreAuth(user) {\n  const res = await get(`/getstoreauth/${user}`);\n  if (res.error) return res.error;\n  if (res.data.status) return \"No Store\";\n  return res.data;\n}\nexport async function makeNewAuth(storename, storeurl, username) {\n  const data = new URLSearchParams({\n    username,\n    storename,\n    storeurl\n  });\n  const res = await post(\"/makestoreauth\", data).catch(catchAxiosError);\n  if (res.error) return res.error;\n  if (!res.data.status) \"Did not work\";\n  return res.data.status;\n}\nexport async function addStoreItem(itemname, itemdescription, itemprice, itemimage, itemstore, itemowner) {\n  const data = new URLSearchParams({\n    itemname,\n    itemdescription,\n    itemprice,\n    itemimage,\n    itemstore,\n    itemowner\n  });\n  const res = await post(\"/createstoreitem\", data).catch(catchAxiosError);\n  if (res.error) return res.error;\n  if (!res.data.status) \"No Response\";\n  return res.data.itemid;\n}\nexport async function removeItem(id) {\n  const res = await get(`/deleteitem/${id}`);\n  if (res.error) return res.error;\n  return res.data.status;\n} // Shopping Card Session fetching and creating //\n// >> ADD TO CART\n// >> REMOVE FROM CART\n// >> GET SHOPPING SESSION (AUTO CREATES SESSION IF NOT EXISTS)\n// >> \n\nexport async function addToCart(email, item) {\n  const data = new URLSearchParams({\n    email,\n    item\n  });\n  const additem = await post('/addtocart', data).catch(catchAxiosError);\n  if (additem) return additem.data.status;\n}\nexport async function getShoppingSession(email) {\n  const res = await get(`/getshoppingsession/${email}`);\n  if (res) return res.data;\n}\nexport async function getCartItems(cartdata) {\n  const res = await get(`/getcartitems/${cartdata}`);\n  if (res) return res.data;\n}\nexport async function clearCart(email) {\n  localStorage.removeItem('cartsession');\n  const res = await get(`/clearcart/${email}`);\n  if (res) return res.data.status;\n}\nexport async function getpaymentintent(email, cartdata) {\n  const data = new URLSearchParams({\n    email,\n    cartdata\n  });\n  const res = await post(\"/paymentIntent\", data).catch(catchAxiosError);\n  if (res.error) return res.error;\n  if (!res.data) return \"Did not load or no items yet...\";\n  return res.data.client_secret;\n}","map":null,"metadata":{},"sourceType":"module"}