{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport axios, { AxiosRequestConfig } from \"axios\";\nimport { catchAxiosError } from \"./error\"; // Base Url for the rest api -- Every other directory can be accessed baseURL + \"/%s\";\n\nexport var baseConfig = {\n  baseURL: \"http://localhost:3600\"\n}; // Post a request to the Go-lang Rest Api plus catch error if necessary\n\nexport var post = function post(url, data) {\n  return axios.post(url, data, baseConfig)[\"catch\"](catchAxiosError);\n};\nexport var postFile = function postFile(url, data, config) {\n  return axios.post(url, data, config)[\"catch\"](catchAxiosError);\n}; // Get the requested json from Go-lang Rest Api plus catch error\n\nexport var get = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url) {\n    var config,\n        axiosConfig,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            config = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n            axiosConfig = _objectSpread(_objectSpread({}, baseConfig), config);\n            _context.next = 4;\n            return axios.get(url, axiosConfig)[\"catch\"](catchAxiosError);\n\n          case 4:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function get(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":null,"metadata":{},"sourceType":"module"}