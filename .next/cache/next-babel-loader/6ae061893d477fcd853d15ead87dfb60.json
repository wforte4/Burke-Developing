{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axios from 'axios';\nimport Router, { useRouter } from 'next/router';\nimport { Component } from 'react';\nimport nextCookie from 'next-cookies';\nimport { baseConfig } from './restservice';\nimport { Logout } from './apiservice';\nimport { post, get, postFile } from \"./restservice\"; // set up cookies\n\nasync function handleAuthSSR(ctx) {\n  const allCookies = nextCookie(ctx);\n  const token = allCookies.accessToken;\n\n  try {\n    const response = await axios.get(baseConfig.baseURL + \"/auth/admin\", {\n      headers: {\n        'Authorization': 'Bearer ' + token\n      }\n    }); // dont really care about response, as long as it not an error\n\n    console.log(\"Server Status:\", response.status);\n  } catch (err) {\n    // in case of error\n    if (err.response) console.log(err.response.data.status);\n    console.log(\"redirecting back to main page\");\n\n    if (ctx.res) {\n      ctx.res.writeHead(302, {\n        Location: '/login'\n      });\n      ctx.res.end();\n    } else {\n      await Router.push('/error', '/login');\n      return null;\n    }\n  }\n\n  return token;\n}\n\nconst getDisplayName = Component => Component.displayName || Component.name || \"Component\";\n\nexport const withAuthSync = WrappedComponent => {\n  var _class, _temp;\n\n  return _temp = _class = class extends Component {\n    static async getInitialProps(ctx) {\n      const token = await handleAuthSSR(ctx);\n      const componentProps = WrappedComponent.getInitialProps && (await WrappedComponent.getInitialProps(ctx));\n      return _objectSpread(_objectSpread({}, componentProps), {}, {\n        token\n      });\n    }\n\n    render() {\n      return __jsx(WrappedComponent, this.props);\n    }\n\n  }, _defineProperty(_class, \"displayName\", `withAuthSync(${getDisplayName(WrappedComponent)})`), _temp;\n};","map":null,"metadata":{},"sourceType":"module"}